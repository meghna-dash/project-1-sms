{"version":3,"file":"bundle.umd.js","sources":["../src/delayFunction.ts","../src/retryFunction.ts","../src/retryLink.ts"],"sourcesContent":["import { Operation } from 'apollo-link';\n\n/**\n * Advanced mode: a function that implements the strategy for calculating delays\n * for particular responses.\n */\nexport interface DelayFunction {\n  (count: number, operation: Operation, error: any): number;\n}\n\nexport interface DelayFunctionOptions {\n  /**\n   * The number of milliseconds to wait before attempting the first retry.\n   *\n   * Delays will increase exponentially for each attempt.  E.g. if this is\n   * set to 100, subsequent retries will be delayed by 200, 400, 800, etc,\n   * until they reach maxDelay.\n   *\n   * Note that if jittering is enabled, this is the _average_ delay.\n   *\n   * Defaults to 300.\n   */\n  initial?: number;\n\n  /**\n   * The maximum number of milliseconds that the link should wait for any\n   * retry.\n   *\n   * Defaults to Infinity.\n   */\n  max?: number;\n\n  /**\n   * Whether delays between attempts should be randomized.\n   *\n   * This helps avoid thundering herd type situations by better distributing\n   * load during major outages.\n   *\n   * Defaults to true.\n   */\n  jitter?: boolean;\n}\n\nexport function buildDelayFunction({\n  initial = 300,\n  max = Infinity,\n  jitter = true,\n}: DelayFunctionOptions = {}): DelayFunction {\n  let baseDelay;\n  if (jitter) {\n    // If we're jittering, baseDelay is half of the maximum delay for that\n    // attempt (and is, on average, the delay we will encounter).\n    baseDelay = initial;\n  } else {\n    // If we're not jittering, adjust baseDelay so that the first attempt\n    // lines up with initialDelay, for everyone's sanity.\n    baseDelay = initial / 2;\n  }\n\n  return function delayFunction(count: number) {\n    let delay = Math.min(max, baseDelay * 2 ** count);\n    if (jitter) {\n      // We opt for a full jitter approach for a mostly uniform distribution,\n      // but bound it within initialDelay and delay for everyone's sanity.\n      delay = Math.random() * delay;\n    }\n\n    return delay;\n  };\n}\n","import { Operation } from 'apollo-link';\n\n/**\n * Advanced mode: a function that determines both whether a particular\n * response should be retried.\n */\nexport interface RetryFunction {\n  (count: number, operation: Operation, error: any): boolean | Promise<boolean>;\n}\n\nexport interface RetryFunctionOptions {\n  /**\n   * The max number of times to try a single operation before giving up.\n   *\n   * Note that this INCLUDES the initial request as part of the count.\n   * E.g. maxTries of 1 indicates no retrying should occur.\n   *\n   * Defaults to 5.  Pass Infinity for infinite retries.\n   */\n  max?: number;\n\n  /**\n   * Predicate function that determines whether a particular error should\n   * trigger a retry.\n   *\n   * For example, you may want to not retry 4xx class HTTP errors.\n   *\n   * By default, all errors are retried.\n   */\n  retryIf?: (error: any, operation: Operation) => boolean | Promise<boolean>;\n}\n\nexport function buildRetryFunction({\n  max = 5,\n  retryIf,\n}: RetryFunctionOptions = {}): RetryFunction {\n  return function retryFunction(count, operation, error) {\n    if (count >= max) return false;\n    return retryIf ? retryIf(error, operation) : !!error;\n  };\n}\n","import {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n} from 'apollo-link';\n\nimport {\n  DelayFunction,\n  DelayFunctionOptions,\n  buildDelayFunction,\n} from './delayFunction';\nimport {\n  RetryFunction,\n  RetryFunctionOptions,\n  buildRetryFunction,\n} from './retryFunction';\n\nexport namespace RetryLink {\n  export interface Options {\n    /**\n     * Configuration for the delay strategy to use, or a custom delay strategy.\n     */\n    delay?: DelayFunctionOptions | DelayFunction;\n\n    /**\n     * Configuration for the retry strategy to use, or a custom retry strategy.\n     */\n    attempts?: RetryFunctionOptions | RetryFunction;\n  }\n}\n\n/**\n * Tracking and management of operations that may be (or currently are) retried.\n */\nclass RetryableOperation<TValue = any> {\n  private retryCount: number = 0;\n  private values: any[] = [];\n  private error: any;\n  private complete = false;\n  private canceled = false;\n  private observers: ZenObservable.Observer<TValue>[] = [];\n  private currentSubscription: ZenObservable.Subscription = null;\n  private timerId: number;\n\n  constructor(\n    private operation: Operation,\n    private nextLink: NextLink,\n    private delayFor: DelayFunction,\n    private retryIf: RetryFunction,\n  ) {}\n\n  /**\n   * Register a new observer for this operation.\n   *\n   * If the operation has previously emitted other events, they will be\n   * immediately triggered for the observer.\n   */\n  public subscribe(observer: ZenObservable.Observer<TValue>) {\n    if (this.canceled) {\n      throw new Error(\n        `Subscribing to a retryable link that was canceled is not supported`,\n      );\n    }\n    this.observers.push(observer);\n\n    // If we've already begun, catch this observer up.\n    for (const value of this.values) {\n      observer.next(value);\n    }\n\n    if (this.complete) {\n      observer.complete();\n    } else if (this.error) {\n      observer.error(this.error);\n    }\n  }\n\n  /**\n   * Remove a previously registered observer from this operation.\n   *\n   * If no observers remain, the operation will stop retrying, and unsubscribe\n   * from its downstream link.\n   */\n  public unsubscribe(observer: ZenObservable.Observer<TValue>) {\n    const index = this.observers.indexOf(observer);\n    if (index < 0) {\n      throw new Error(\n        `RetryLink BUG! Attempting to unsubscribe unknown observer!`,\n      );\n    }\n    // Note that we are careful not to change the order of length of the array,\n    // as we are often mid-iteration when calling this method.\n    this.observers[index] = null;\n\n    // If this is the last observer, we're done.\n    if (this.observers.every(o => o === null)) {\n      this.cancel();\n    }\n  }\n\n  /**\n   * Start the initial request.\n   */\n  public start() {\n    if (this.currentSubscription) return; // Already started.\n\n    this.try();\n  }\n\n  /**\n   * Stop retrying for the operation, and cancel any in-progress requests.\n   */\n  public cancel() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n    }\n    clearTimeout(this.timerId);\n    this.timerId = null;\n    this.currentSubscription = null;\n    this.canceled = true;\n  }\n\n  private try() {\n    this.currentSubscription = this.nextLink(this.operation).subscribe({\n      next: this.onNext,\n      error: this.onError,\n      complete: this.onComplete,\n    });\n  }\n\n  private onNext = (value: any) => {\n    this.values.push(value);\n    for (const observer of this.observers) {\n      if (!observer) continue;\n      observer.next(value);\n    }\n  };\n\n  private onComplete = () => {\n    this.complete = true;\n    for (const observer of this.observers) {\n      if (!observer) continue;\n      observer.complete();\n    }\n  };\n\n  private onError = async error => {\n    this.retryCount += 1;\n\n    // Should we retry?\n    const shouldRetry = await this.retryIf(\n      this.retryCount,\n      this.operation,\n      error,\n    );\n    if (shouldRetry) {\n      this.scheduleRetry(this.delayFor(this.retryCount, this.operation, error));\n      return;\n    }\n\n    this.error = error;\n    for (const observer of this.observers) {\n      if (!observer) continue;\n      observer.error(error);\n    }\n  };\n\n  private scheduleRetry(delay) {\n    if (this.timerId) {\n      throw new Error(`RetryLink BUG! Encountered overlapping retries`);\n    }\n\n    this.timerId = setTimeout(() => {\n      this.timerId = null;\n      this.try();\n    }, delay);\n  }\n}\n\nexport class RetryLink extends ApolloLink {\n  private delayFor: DelayFunction;\n  private retryIf: RetryFunction;\n\n  constructor({ delay, attempts }: RetryLink.Options = {}) {\n    super();\n    this.delayFor =\n      typeof delay === 'function' ? delay : buildDelayFunction(delay);\n    this.retryIf =\n      typeof attempts === 'function' ? attempts : buildRetryFunction(attempts);\n  }\n\n  public request(\n    operation: Operation,\n    nextLink: NextLink,\n  ): Observable<FetchResult> {\n    const retryable = new RetryableOperation(\n      operation,\n      nextLink,\n      this.delayFor,\n      this.retryIf,\n    );\n    retryable.start();\n\n    return new Observable(observer => {\n      retryable.subscribe(observer);\n      return () => {\n        retryable.unsubscribe(observer);\n      };\n    });\n  }\n}\n"],"names":["Observable","ApolloLink"],"mappings":"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"}