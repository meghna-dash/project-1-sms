{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar apollo_client_1 = require(\"apollo-client\");\n\nvar apollo_link_1 = require(\"apollo-link\");\n\nvar apollo_link_2 = require(\"apollo-link\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nvar graphql_1 = require(\"graphql\");\n\nvar complex_object_link_uploader_1 = require(\"./complex-object-link-uploader\");\n\nvar ComplexObjectLink =\n/** @class */\nfunction (_super) {\n  __extends(ComplexObjectLink, _super);\n\n  function ComplexObjectLink(credentials) {\n    var _this = _super.call(this) || this;\n\n    _this.link = exports.complexObjectLink(credentials);\n    return _this;\n  }\n\n  ComplexObjectLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n\n  return ComplexObjectLink;\n}(apollo_link_2.ApolloLink);\n\nexports.ComplexObjectLink = ComplexObjectLink;\n\nexports.complexObjectLink = function (credentials) {\n  return new apollo_link_2.ApolloLink(function (operation, forward) {\n    return new apollo_link_1.Observable(function (observer) {\n      var handle;\n      var operationType = apollo_utilities_1.getOperationDefinition(operation.query).operation;\n      var isMutation = operationType === 'mutation';\n      var objectsToUpload = isMutation ? findInObject(operation.variables) : {};\n      var uploadPromise = Promise.resolve(operation);\n\n      if (Object.keys(objectsToUpload).length) {\n        var uploadCredentials = typeof credentials === 'function' ? credentials.call() : credentials;\n        uploadPromise = Promise.resolve(uploadCredentials).then(function (credentials) {\n          var uploadPromises = Object.entries(objectsToUpload).map(function (_a) {\n            var _ = _a[0],\n                fileField = _a[1];\n            return complex_object_link_uploader_1.default(fileField, {\n              credentials: credentials\n            });\n          });\n          return Promise.all([operation].concat(uploadPromises));\n        }).then(function (_a) {\n          var operation = _a[0],\n              all = _a.slice(1);\n\n          return operation;\n        }).catch(function (err) {\n          var error = new graphql_1.GraphQLError(err.message);\n          error.errorType = 'AWSAppSyncClient:S3UploadException';\n          throw new apollo_client_1.ApolloError({\n            graphQLErrors: [error],\n            extraInfo: err\n          });\n        });\n      }\n\n      uploadPromise.then(forward).then(function (observable) {\n        handle = observable.subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(function (err) {\n        observer.error(err);\n      });\n      return function () {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n};\n\nvar complexObjectFields = [{\n  name: 'bucket',\n  type: 'string'\n}, {\n  name: 'key',\n  type: 'string'\n}, {\n  name: 'region',\n  type: 'string'\n}, {\n  name: 'mimeType',\n  type: 'string'\n}, {\n  name: 'localUri',\n  type: ['object', 'string']\n}];\n\nvar findInObject = function (obj) {\n  var testFn = function (val) {\n    return complexObjectFields.every(function (field) {\n      var hasValue = val[field.name];\n      var types = Array.isArray(field.type) ? field.type : [field.type];\n      var isOfType = hasValue && types.reduce(function (prev, curr) {\n        return prev || typeof val[field.name] === curr;\n      }, false);\n      return isOfType;\n    });\n  };\n\n  var _findInObject = function (obj, path, acc) {\n    if (path === void 0) {\n      path = '';\n    }\n\n    if (acc === void 0) {\n      acc = {};\n    }\n\n    if (!obj) {\n      return acc;\n    }\n\n    if (testFn(obj)) {\n      acc[path] = __assign({}, obj);\n      delete obj.mimeType;\n      delete obj.localUri;\n    }\n\n    if (typeof obj === 'object') {\n      Object.keys(obj).forEach(function (key) {\n        var val = obj[key];\n\n        if (Array.isArray(val)) {\n          val.forEach(function (v, i) {\n            return _findInObject(v, path + \".\" + key + \"[\" + i + \"]\", acc);\n          });\n        } else if (typeof val === 'object') {\n          _findInObject(val, \"\" + path + (path && '.') + key, acc);\n        }\n      });\n    }\n\n    return _findInObject(null, path, acc);\n  };\n\n  return _findInObject(obj);\n};","map":null,"metadata":{},"sourceType":"script"}