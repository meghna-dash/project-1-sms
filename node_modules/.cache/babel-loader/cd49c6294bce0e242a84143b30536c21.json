{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar utils_1 = require(\"../utils\");\n\nvar apollo_cache_inmemory_1 = require(\"apollo-cache-inmemory\");\n\nexports.defaultDataIdFromObject = apollo_cache_inmemory_1.defaultDataIdFromObject;\n\nvar deltaSync_1 = require(\"../deltaSync\");\n\nvar logger = utils_1.rootLogger.extend('offline-cache'); // Offline schema keys: Do not change in a non-backwards-compatible way\n\nexports.NORMALIZED_CACHE_KEY = 'appsync';\nexports.METADATA_KEY = 'appsync-metadata';\nvar WRITE_CACHE_ACTION = 'AAS_WRITE_CACHE';\n\nfunction isOfflineCacheOptions(obj) {\n  return !!obj.store;\n}\n\n;\n\nvar MyCache =\n/** @class */\nfunction (_super) {\n  __extends(MyCache, _super);\n\n  function MyCache(optionsOrStore, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this, config) || this;\n\n    _this.storeCacheRootMutation = false;\n\n    if (isOfflineCacheOptions(optionsOrStore)) {\n      var store = optionsOrStore.store,\n          _a = optionsOrStore.storeCacheRootMutation,\n          storeCacheRootMutation = _a === void 0 ? false : _a;\n      _this.store = store;\n      _this.storeCacheRootMutation = storeCacheRootMutation;\n    } else {\n      _this.store = optionsOrStore;\n    }\n\n    var cancelSubscription = _this.store.subscribe(function () {\n      var _a = _this.store.getState(),\n          _b = exports.NORMALIZED_CACHE_KEY,\n          _c = _a[_b],\n          normCache = _c === void 0 ? {} : _c,\n          _d = _a.rehydrated,\n          rehydrated = _d === void 0 ? false : _d;\n\n      _super.prototype.restore.call(_this, __assign({}, normCache));\n\n      if (rehydrated) {\n        logger('Rehydrated! Cancelling subscription.');\n        cancelSubscription();\n      }\n    });\n\n    return _this;\n  }\n\n  MyCache.prototype.restore = function (data) {\n    boundWriteCache(this.store, data);\n\n    _super.prototype.restore.call(this, data);\n\n    _super.prototype.broadcastWatches.call(this);\n\n    return this;\n  };\n\n  MyCache.prototype.write = function (write) {\n    _super.prototype.write.call(this, write);\n\n    if (!this.storeCacheRootMutation && write.dataId === 'ROOT_MUTATION') {\n      this.data.delete('ROOT_MUTATION');\n    }\n\n    if (this.data && typeof this.data.record === 'undefined') {\n      // do not persist contents of a RecordingCache\n      var data = _super.prototype.extract.call(this, true);\n\n      boundWriteCache(this.store, data);\n    } else {\n      logger('No dispatch for RecordingCache');\n    }\n  };\n\n  MyCache.prototype.reset = function () {\n    logger('Resetting cache');\n    boundWriteCache(this.store, {});\n    return _super.prototype.reset.call(this);\n  };\n\n  MyCache.prototype.getIdsMap = function () {\n    var _a = exports.METADATA_KEY,\n        idsMap = this.store.getState()[_a].idsMap;\n\n    return __assign({}, idsMap);\n  };\n\n  return MyCache;\n}(apollo_cache_inmemory_1.InMemoryCache);\n\nexports.default = MyCache;\n\nvar boundWriteCache = function (store, data) {\n  logger(\"Dispatching \" + WRITE_CACHE_ACTION);\n  store.dispatch(writeThunk(WRITE_CACHE_ACTION, data));\n};\n\nvar writeThunk = function (type, payload) {\n  return function (dispatch, _getState) {\n    return dispatch({\n      type: type,\n      payload: payload\n    });\n  };\n};\n\nexports.reducer = function () {\n  var _a;\n\n  return _a = {}, _a[exports.NORMALIZED_CACHE_KEY] = function (state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    var type = action.type,\n        normCache = action.payload;\n\n    switch (type) {\n      case WRITE_CACHE_ACTION:\n        return __assign({}, normCache);\n\n      default:\n        return state;\n    }\n  }, _a;\n};","map":null,"metadata":{},"sourceType":"script"}