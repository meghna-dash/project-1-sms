{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar apollo_link_1 = require(\"apollo-link\");\n\nvar apollo_link_retry_1 = require(\"apollo-link-retry\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nexports.PERMANENT_ERROR_KEY = typeof Symbol !== 'undefined' ? Symbol('permanentError') : '@@permanentError';\nvar BASE_TIME_MS = 100;\nvar JITTER_FACTOR = 100;\nvar MAX_DELAY_MS = 5 * 60 * 1000;\n\nvar getDelay = function (count) {\n  return Math.pow(2, count) * BASE_TIME_MS + JITTER_FACTOR * Math.random();\n};\n\nexports.SKIP_RETRY_KEY = '@@skipRetry';\n\nexports.getEffectDelay = function (_action, retries) {\n  var delay = getDelay(retries);\n  return delay <= MAX_DELAY_MS ? delay : null;\n};\n\nexports.createRetryLink = function (origLink) {\n  var delay;\n  var retryLink = new apollo_link_retry_1.RetryLink({\n    attempts: function (count, operation, error) {\n      var _a = exports.PERMANENT_ERROR_KEY,\n          _b = error[_a],\n          permanent = _b === void 0 ? false : _b;\n      var _c = exports.SKIP_RETRY_KEY,\n          _d = operation.variables[_c],\n          skipRetry = _d === void 0 ? false : _d;\n\n      if (permanent) {\n        return false;\n      }\n\n      if (error.statusCode >= 400 && error.statusCode < 500) {\n        return false;\n      }\n\n      if (apollo_utilities_1.graphQLResultHasError({\n        errors: error ? error.graphQLErrors : []\n      })) {\n        return false;\n      }\n\n      if (skipRetry) {\n        return false;\n      }\n\n      delay = getDelay(count);\n      return delay <= MAX_DELAY_MS;\n    },\n    delay: function (_count, _operation, _error) {\n      return delay;\n    }\n  });\n  var link = apollo_link_1.ApolloLink.from([retryLink, origLink]);\n  return new apollo_link_1.ApolloLink(function (operation, forward) {\n    var _a = operation.variables,\n        _b = exports.SKIP_RETRY_KEY,\n        _c = _a[_b],\n        skipRetry = _c === void 0 ? false : _c,\n        otherVars = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n    if (skipRetry) {\n      operation.variables = otherVars;\n    }\n\n    return link.request(operation, forward);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}