{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar AbstractConvertPredictionsProvider_1 = require(\"../types/Providers/AbstractConvertPredictionsProvider\");\n\nvar Translate = require(\"aws-sdk/clients/translate\");\n\nvar TextToSpeech = require(\"aws-sdk/clients/polly\");\n\nvar types_1 = require(\"../types\");\n\nvar core_1 = require(\"@aws-amplify/core\");\n\nvar eventstream_marshaller_1 = require(\"@aws-sdk/eventstream-marshaller\");\n\nvar util_utf8_node_1 = require(\"@aws-sdk/util-utf8-node\");\n\nvar logger = new core_1.ConsoleLogger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new eventstream_marshaller_1.EventStreamMarshaller(util_utf8_node_1.toUtf8, util_utf8_node_1.fromUtf8);\n\nvar AmazonAIConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n\n    _this.inputSampleRate = 44100;\n    _this.outputSampleRate = 16000;\n    return _this;\n  }\n\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    var _this = this;\n\n    logger.debug('Starting translation');\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('region not configured for transcription')];\n              }\n\n              return [4\n              /*yield*/\n              , core_1.Credentials.get()];\n\n            case 1:\n              credentials = _h.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n              targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n\n              if (!sourceLanguageCode || !targetLanguageCode) {\n                return [2\n                /*return*/\n                , rej('Please provide both source and target language')];\n              }\n\n              this.translate = new Translate({\n                region: region,\n                credentials: credentials\n              });\n              this.translate.translateText({\n                SourceLanguageCode: sourceLanguageCode,\n                TargetLanguageCode: targetLanguageCode,\n                Text: input.translateText.source.text\n              }, function (err, data) {\n                logger.debug({\n                  err: err,\n                  data: data\n                });\n\n                if (err) {\n                  return rej(err);\n                } else {\n                  return res({\n                    text: data.TranslatedText,\n                    language: data.TargetLanguageCode\n                  });\n                }\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , core_1.Credentials.get()];\n\n            case 1:\n              credentials = _f.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n              if (!input.textToSpeech.source) {\n                return [2\n                /*return*/\n                , rej('Source needs to be provided in the input')];\n              }\n\n              voiceId = input.textToSpeech.voiceId || VoiceId;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('Region was undefined. Did you enable speech generator using amplify CLI?')];\n              }\n\n              if (!voiceId) {\n                return [2\n                /*return*/\n                , rej('VoiceId was undefined.')];\n              }\n\n              this.textToSpeech = new TextToSpeech({\n                region: region,\n                credentials: credentials\n              });\n              this.textToSpeech.synthesizeSpeech({\n                OutputFormat: 'mp3',\n                Text: input.textToSpeech.source.text,\n                VoiceId: voiceId,\n                TextType: 'text',\n                SampleRate: '24000'\n              }, function (err, data) {\n                if (err) {\n                  rej(err);\n                } else {\n                  var blob = new Blob([data.AudioStream], {\n                    type: data.ContentType\n                  });\n                  var url = URL.createObjectURL(blob);\n                  res({\n                    speech: {\n                      url: url\n                    },\n                    audioStream: data.AudioStream.buffer,\n                    text: input.textToSpeech.source.text\n                  });\n                }\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_1, err_2;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _h.trys.push([0, 7,, 8]);\n\n              logger.debug('starting transcription..');\n              return [4\n              /*yield*/\n              , core_1.Credentials.get()];\n\n            case 1:\n              credentials = _h.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('region not configured for transcription')];\n              }\n\n              if (!languageCode) {\n                return [2\n                /*return*/\n                , rej('languageCode not configured or provided for transcription')];\n              }\n\n              _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n              if (!types_1.isBytesSource(source)) return [3\n              /*break*/\n              , 6];\n              return [4\n              /*yield*/\n              , this.openConnectionWithTranscribe({\n                credentials: credentials,\n                region: region,\n                languageCode: language\n              })];\n\n            case 2:\n              connection = _h.sent();\n              _h.label = 3;\n\n            case 3:\n              _h.trys.push([3, 5,, 6]);\n\n              return [4\n              /*yield*/\n              , this.sendDataToTranscribe({\n                connection: connection,\n                raw: source.bytes\n              })];\n\n            case 4:\n              fullText = _h.sent();\n              return [2\n              /*return*/\n              , res({\n                transcription: {\n                  fullText: fullText\n                }\n              })];\n\n            case 5:\n              err_1 = _h.sent();\n              rej(err_1);\n              return [3\n              /*break*/\n              , 6];\n\n            case 6:\n              return [2\n              /*return*/\n              , rej('Source types other than byte source are not supported.')];\n\n            case 7:\n              err_2 = _h.sent();\n              return [2\n              /*return*/\n              , rej(err_2.name + ': ' + err_2.message)];\n\n            case 8:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(String.fromCharCode.apply(String, transcribeMessage.body));\n\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return decodedMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n\n    var connection = _a.connection,\n        raw = _a.raw;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n\n      logger.debug({\n        raw: raw\n      });\n\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n\n          _this.sendEncodedDataToTranscribe(connection, data);\n        }\n      } // sending end frame\n\n\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n\n    return buffer;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer;\n\n    if (this.outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n\n    var sampleRateRatio = this.inputSampleRate / this.outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n          count = 0;\n\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n\n    return result;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n\n    var userCredentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=16000&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = core_1.Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider_1.AbstractConvertPredictionsProvider);\n\nexports.default = AmazonAIConvertPredictionsProvider;","map":null,"metadata":{},"sourceType":"script"}