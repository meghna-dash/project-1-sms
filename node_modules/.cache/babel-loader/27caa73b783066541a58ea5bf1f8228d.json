{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar apollo_link_1 = require(\"apollo-link\");\n\nvar utils_1 = require(\"./utils\");\n\nvar Paho = require(\"./vendor/paho-mqtt\");\n\nvar apollo_client_1 = require(\"apollo-client\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nvar logger = utils_1.rootLogger.extend('subscriptions');\nvar mqttLogger = logger.extend('mqtt');\nexports.CONTROL_EVENTS_KEY = '@@controlEvents';\n\nvar SubscriptionHandshakeLink =\n/** @class */\nfunction (_super) {\n  __extends(SubscriptionHandshakeLink, _super);\n\n  function SubscriptionHandshakeLink(subsInfoContextKey) {\n    var _this = _super.call(this) || this;\n\n    _this.topicObservers = new Map();\n    _this.clientObservers = new Map();\n\n    _this.onMessage = function (topic, message, selectionNames) {\n      var parsedMessage = JSON.parse(message);\n\n      var observers = _this.topicObservers.get(topic);\n\n      var data = selectionNames.reduce(function (acc, name) {\n        return acc[name] = acc[name] || null, acc;\n      }, parsedMessage.data || {});\n      logger('Message received', {\n        data: data,\n        topic: topic,\n        observers: observers\n      });\n      observers.forEach(function (observer) {\n        try {\n          observer.next(__assign({}, parsedMessage, {\n            data: data\n          }));\n        } catch (err) {\n          logger(err);\n        }\n      });\n    };\n\n    _this.subsInfoContextKey = subsInfoContextKey;\n    return _this;\n  }\n\n  SubscriptionHandshakeLink.prototype.request = function (operation) {\n    var _this = this;\n\n    var _a;\n\n    var _b = operation.getContext(),\n        _c = this.subsInfoContextKey,\n        subsInfo = _b[_c],\n        _d = _b.controlMessages,\n        _e = exports.CONTROL_EVENTS_KEY,\n        controlEvents = (_d === void 0 ? (_a = {}, _a[exports.CONTROL_EVENTS_KEY] = undefined, _a) : _d)[_e];\n\n    var _f = subsInfo.extensions,\n        _g = (_f === void 0 ? {\n      subscription: {\n        newSubscriptions: {},\n        mqttConnections: []\n      }\n    } : _f).subscription,\n        newSubscriptions = _g.newSubscriptions,\n        mqttConnections = _g.mqttConnections,\n        _h = subsInfo.errors,\n        errors = _h === void 0 ? [] : _h;\n\n    if (errors && errors.length) {\n      return new apollo_link_1.Observable(function (observer) {\n        observer.error(new apollo_client_1.ApolloError({\n          errorMessage: 'Error during subscription handshake',\n          extraInfo: {\n            errors: errors\n          },\n          graphQLErrors: errors\n        }));\n        return function () {};\n      });\n    }\n\n    var newSubscriptionTopics = Object.keys(newSubscriptions).map(function (subKey) {\n      return newSubscriptions[subKey].topic;\n    });\n    var existingTopicsWithObserver = new Set(newSubscriptionTopics.filter(function (t) {\n      return _this.topicObservers.has(t);\n    }));\n    var newTopics = new Set(newSubscriptionTopics.filter(function (t) {\n      return !existingTopicsWithObserver.has(t);\n    }));\n    return new apollo_link_1.Observable(function (observer) {\n      existingTopicsWithObserver.forEach(function (t) {\n        _this.topicObservers.get(t).add(observer);\n\n        var anObserver = Array.from(_this.topicObservers.get(t)).find(function () {\n          return true;\n        });\n        var clientId = Array.from(_this.clientObservers).find(function (_a) {\n          var observers = _a[1].observers;\n          return observers.has(anObserver);\n        })[0];\n\n        _this.clientObservers.get(clientId).observers.add(observer);\n      });\n      var newTopicsConnectionInfo = mqttConnections.filter(function (c) {\n        return c.topics.some(function (t) {\n          return newTopics.has(t);\n        });\n      }).map(function (_a) {\n        var topics = _a.topics,\n            rest = __rest(_a, [\"topics\"]);\n\n        return __assign({}, rest, {\n          topics: topics.filter(function (t) {\n            return newTopics.has(t);\n          })\n        });\n      });\n\n      _this.connectNewClients(newTopicsConnectionInfo, observer, operation);\n\n      return function () {\n        var clientsForCurrentObserver = Array.from(_this.clientObservers).filter(function (_a) {\n          var observers = _a[1].observers;\n          return observers.has(observer);\n        });\n        clientsForCurrentObserver.forEach(function (_a) {\n          var clientId = _a[0];\n          return _this.clientObservers.get(clientId).observers.delete(observer);\n        });\n\n        _this.clientObservers.forEach(function (_a) {\n          var observers = _a.observers,\n              client = _a.client;\n\n          if (observers.size === 0) {\n            if (client.isConnected()) {\n              client.disconnect();\n            }\n\n            _this.clientObservers.delete(client.clientId);\n          }\n        });\n\n        _this.clientObservers = new Map(Array.from(_this.clientObservers).filter(function (_a) {\n          var observers = _a[1].observers;\n          return observers.size > 0;\n        }));\n\n        _this.topicObservers.forEach(function (observers) {\n          return observers.delete(observer);\n        });\n\n        _this.topicObservers = new Map(Array.from(_this.topicObservers).filter(function (_a) {\n          var observers = _a[1];\n          return observers.size > 0;\n        }));\n      };\n    }).filter(function (data) {\n      var _a = data.extensions,\n          _b = (_a === void 0 ? {} : _a).controlMsgType,\n          controlMsgType = _b === void 0 ? undefined : _b;\n      var isControlMsg = typeof controlMsgType !== 'undefined';\n      return controlEvents === true || !isControlMsg;\n    });\n  };\n\n  SubscriptionHandshakeLink.prototype.connectNewClients = function (connectionInfo, observer, operation) {\n    return __awaiter(this, void 0, void 0, function () {\n      var query, selectionNames, result, data;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        query = operation.query;\n        selectionNames = apollo_utilities_1.getMainDefinition(query).selectionSet.selections.map(function (_a) {\n          var value = _a.name.value;\n          return value;\n        });\n        result = Promise.all(connectionInfo.map(function (c) {\n          return _this.connectNewClient(c, observer, selectionNames);\n        }));\n        data = selectionNames.reduce(function (acc, name) {\n          return acc[name] = acc[name] || null, acc;\n        }, {});\n        observer.next({\n          data: data,\n          extensions: {\n            controlMsgType: 'CONNECTED',\n            controlMsgInfo: {\n              connectionInfo: connectionInfo\n            }\n          }\n        });\n        return [2\n        /*return*/\n        , result];\n      });\n    });\n  };\n\n  ;\n\n  SubscriptionHandshakeLink.prototype.connectNewClient = function (connectionInfo, observer, selectionNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientId, url, topics, client;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            clientId = connectionInfo.client, url = connectionInfo.url, topics = connectionInfo.topics;\n            client = new Paho.Client(url, clientId);\n            client.trace = mqttLogger.bind(null, clientId);\n\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                  args = __rest(_a, [\"errorCode\"]);\n\n              if (errorCode !== 0) {\n                topics.forEach(function (t) {\n                  if (_this.topicObservers.has(t)) {\n                    _this.topicObservers.get(t).forEach(function (observer) {\n                      return observer.error(__assign({}, args, {\n                        permanent: true\n                      }));\n                    });\n                  }\n                });\n              }\n\n              topics.forEach(function (t) {\n                return _this.topicObservers.delete(t);\n              });\n            };\n\n            client.onMessageArrived = function (_a) {\n              var destinationName = _a.destinationName,\n                  payloadString = _a.payloadString;\n              return _this.onMessage(destinationName, payloadString, selectionNames);\n            };\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: url.indexOf('wss://') === 0,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(client);\n                },\n                onFailure: reject\n              });\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.subscribeToTopics(client, topics, observer)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , client];\n        }\n      });\n    });\n  };\n\n  SubscriptionHandshakeLink.prototype.subscribeToTopics = function (client, topics, observer) {\n    var _this = this;\n\n    return Promise.all(topics.map(function (topic) {\n      return _this.subscribeToTopic(client, topic, observer);\n    }));\n  };\n\n  SubscriptionHandshakeLink.prototype.subscribeToTopic = function (client, topic, observer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      client.subscribe(topic, {\n        onSuccess: function () {\n          if (!_this.topicObservers.has(topic)) {\n            _this.topicObservers.set(topic, new Set());\n          }\n\n          if (!_this.clientObservers.has(client.clientId)) {\n            _this.clientObservers.set(client.clientId, {\n              client: client,\n              observers: new Set()\n            });\n          }\n\n          _this.topicObservers.get(topic).add(observer);\n\n          _this.clientObservers.get(client.clientId).observers.add(observer);\n\n          resolve(topic);\n        },\n        onFailure: reject\n      });\n    });\n  };\n\n  return SubscriptionHandshakeLink;\n}(apollo_link_1.ApolloLink);\n\nexports.SubscriptionHandshakeLink = SubscriptionHandshakeLink;","map":null,"metadata":{},"sourceType":"script"}