{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar subscription_handshake_link_1 = require(\"./subscription-handshake-link\");\n\nexports.CONTROL_EVENTS_KEY = subscription_handshake_link_1.CONTROL_EVENTS_KEY;\n\nvar apollo_link_1 = require(\"apollo-link\");\n\nvar apollo_link_http_1 = require(\"apollo-link-http\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nvar non_terminating_link_1 = require(\"./non-terminating-link\");\n\nexports.createSubscriptionHandshakeLink = function (url, resultsFetcherLink) {\n  if (resultsFetcherLink === void 0) {\n    resultsFetcherLink = apollo_link_http_1.createHttpLink({\n      uri: url\n    });\n  }\n\n  return apollo_link_1.ApolloLink.split(function (operation) {\n    var query = operation.query;\n\n    var _a = apollo_utilities_1.getMainDefinition(query),\n        kind = _a.kind,\n        graphqlOperation = _a.operation;\n\n    var isSubscription = kind === 'OperationDefinition' && graphqlOperation === 'subscription';\n    return isSubscription;\n  }, apollo_link_1.ApolloLink.from([new non_terminating_link_1.NonTerminatingLink('controlMessages', {\n    link: new apollo_link_1.ApolloLink(function (operation, _forward) {\n      return new apollo_link_1.Observable(function (observer) {\n        var _a;\n\n        var _b = operation.variables,\n            _c = subscription_handshake_link_1.CONTROL_EVENTS_KEY,\n            controlEvents = _b[_c],\n            variables = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n        if (typeof controlEvents !== 'undefined') {\n          operation.variables = variables;\n        }\n\n        observer.next((_a = {}, _a[subscription_handshake_link_1.CONTROL_EVENTS_KEY] = controlEvents, _a));\n        return function () {};\n      });\n    })\n  }), new non_terminating_link_1.NonTerminatingLink('subsInfo', {\n    link: resultsFetcherLink\n  }), new subscription_handshake_link_1.SubscriptionHandshakeLink('subsInfo')]), resultsFetcherLink);\n};","map":null,"metadata":{},"sourceType":"script"}