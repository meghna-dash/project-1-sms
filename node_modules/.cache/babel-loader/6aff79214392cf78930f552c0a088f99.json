{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\n\nfunction makeCamelCase(obj, keys) {\n  if (!obj) return undefined;\n  var newObj = {};\n  var keysToRename = keys ? keys : Object.keys(obj);\n  keysToRename.forEach(function (key) {\n    var _a;\n\n    if (obj.hasOwnProperty(key)) {\n      // change the key to camelcase.\n      var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n      Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n    }\n  });\n  return newObj;\n}\n\nexports.makeCamelCase = makeCamelCase;\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\n\nfunction makeCamelCaseArray(objArr, keys) {\n  if (!objArr) return undefined;\n  return objArr.map(function (obj) {\n    return makeCamelCase(obj, keys);\n  });\n}\n\nexports.makeCamelCaseArray = makeCamelCaseArray;\n/**\n * Converts blob to array buffer\n */\n\nfunction blobToArrayBuffer(blob) {\n  return new Promise(function (res, rej) {\n    var reader = new FileReader();\n\n    reader.onload = function (_event) {\n      res(reader.result);\n    };\n\n    reader.onerror = function (err) {\n      rej(err);\n    };\n\n    try {\n      reader.readAsArrayBuffer(blob);\n    } catch (err) {\n      rej(err); // in case user gives invalid type\n    }\n  });\n}\n\nexports.blobToArrayBuffer = blobToArrayBuffer;","map":null,"metadata":{},"sourceType":"script"}