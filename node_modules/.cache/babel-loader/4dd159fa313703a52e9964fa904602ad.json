{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar apollo_link_1 = require(\"apollo-link\");\n\nvar apollo_link_retry_1 = require(\"apollo-link-retry\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ConflictResolutionLink =\n/** @class */\nfunction (_super) {\n  __extends(ConflictResolutionLink, _super);\n\n  function ConflictResolutionLink(conflictResolver, maxRetries) {\n    if (maxRetries === void 0) {\n      maxRetries = 10;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.conflictResolver = conflictResolver;\n    _this.maxRetries = maxRetries;\n    _this.link = apollo_link_1.ApolloLink.from([new apollo_link_retry_1.RetryLink({\n      delay: {\n        initial: 0,\n        max: 0\n      },\n      attempts: function (count, operation, error) {\n        if (count > _this.maxRetries) {\n          return false;\n        }\n\n        if (_this.hasConflictError(error)) {\n          if (typeof _this.conflictResolver === 'function') {\n            var data = error.data;\n            var mutation = operation.query;\n            var mutationName = utils_1.getOperationFieldName(mutation);\n            var operationType = 'mutation';\n            var retries = count;\n\n            var variables = __assign({}, operation.variables);\n\n            var newVars = _this.conflictResolver({\n              data: data,\n              mutation: mutation,\n              mutationName: mutationName,\n              operationType: operationType,\n              retries: retries,\n              variables: variables\n            });\n\n            if (newVars === 'DISCARD') {\n              return false;\n            }\n\n            if (newVars) {\n              operation.variables = newVars;\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }), new apollo_link_1.ApolloLink(function (op, fwd) {\n      return new apollo_link_1.Observable(function (observer) {\n        fwd(op).subscribe({\n          next: function (data) {\n            var err = (data.errors || []).find(_this.hasConflictError);\n\n            if (err) {\n              observer.error(err);\n            } else {\n              observer.next(__assign({}, data, {\n                context: __assign({}, data.context, {\n                  additionalDataContext: {\n                    newVars: op.variables\n                  }\n                })\n              }));\n            }\n          },\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n        return function () {\n          return null;\n        };\n      });\n    })]);\n    return _this;\n  }\n\n  ConflictResolutionLink.prototype.hasConflictError = function (error) {\n    var hasConflictError = ['DynamoDB:ConditionalCheckFailedException'].some(function (err) {\n      return err === error.errorType;\n    });\n    return hasConflictError;\n  };\n\n  ConflictResolutionLink.prototype.request = function (operation, forward) {\n    if (typeof this.conflictResolver !== 'function') {\n      return utils_1.passthroughLink(operation, forward);\n    }\n\n    return this.link.request(operation, forward);\n  };\n\n  return ConflictResolutionLink;\n}(apollo_link_1.ApolloLink);\n\nexports.default = ConflictResolutionLink;","map":null,"metadata":{},"sourceType":"script"}