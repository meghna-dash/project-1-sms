{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar buffer_1 = require(\"buffer\");\n\nvar is_array_buffer_1 = require(\"@aws-sdk/is-array-buffer\");\n\nfunction fromArrayBuffer(input, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  if (length === void 0) {\n    length = input.byteLength - offset;\n  }\n\n  if (!is_array_buffer_1.isArrayBuffer(input)) {\n    throw new Error('argument passed to fromArrayBuffer was not an ArrayBuffer');\n  }\n\n  if (typeof buffer_1.Buffer.from === 'function' && buffer_1.Buffer.from !== Uint8Array.from) {\n    return buffer_1.Buffer.from(input, offset, length);\n  } // Any version of node that supports the optional offset and length\n  // parameters, which were added in Node 6.0.0, will support Buffer.from and\n  // have already returned. Throw if offset is not 0 or if length differs from\n  // the underlying buffer's length.\n\n\n  if (offset !== 0 || length !== input.byteLength) {\n    throw new Error(\"Unable to convert TypedArray to Buffer in Node \" + process.version);\n  }\n\n  return new buffer_1.Buffer(input);\n}\n\nexports.fromArrayBuffer = fromArrayBuffer;\n\nfunction fromString(input, encoding) {\n  if (typeof input !== 'string') {\n    throw new Error('argument passed to fromString was not a string');\n  }\n\n  if (typeof buffer_1.Buffer.from === 'function' && buffer_1.Buffer.from !== Uint8Array.from) {\n    return buffer_1.Buffer.from(input, encoding);\n  }\n\n  return new buffer_1.Buffer(input, encoding);\n}\n\nexports.fromString = fromString;","map":null,"metadata":{},"sourceType":"script"}